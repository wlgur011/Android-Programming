1 OOP 개념의 정리

 

OOP란 Object Oriented Programming 의 약차이며 객체지향적 프로그래밍 이라고 한다.

 

객체지향 에서는 주목해야할 단어가 5가지 있는데 클래스, 오브젝트, 캡슐화, 상속성, 다형성 이있다.

클래스는 추상적이고, 오브젝트는 실체적이다. 예를 들면 동물중 강아지 라고 하는것은 굉장히 추상적인 표현이지만,

이웃집 누군가가 키우는 포메라니안종의 이름이 뽀삐 라는 강아지는 실체적이다. 여기서 클래스를 강아지, 오브젝트를 뽀삐라고 볼수 있는 것이다.

즉 클래스는 표현 대상들의 공통적인 특징을 서술 한 것이다.

클래스의 특징으로는 추상적이라는 것이다. 예를 들면 동물에는 개,고양이등 많은 종류가 있다 그러나 개에는 무수히 많은 종류가 있으며 많은 개들의 행위( 사료를 먹고 꼬리를 흔드는 행위 )를 표현하는 대표적인 것이 개인 것이다. 

 

또 다른 클래스의 특징은 캡슐화이다. 캡슐화란 데이터와 데이터를 다루는 방법을 묶는것이다.

캡슐화를 통하여 쪼개져있는 여러가지 데이터를 하나로 묶고, 내부를 숨김으로써 정보를 은닉할 수있다.

비유를 하자면 많은 사람들이 휴대폰을 사용하지만 휴대폰 내부의 여러가지 장치들은 몰라도 되는 것이다.

 

상속성이란 하나의 클래스가 가지고있는 특징을 그대로 다른 클래스가 물려받는 것을 말한다.

강아지라는 최상위 클래스가 사료를 먹고, 꼬리를 흔드는 행위를 가지고있다면 그것을 물려받은

푸들,요크셔테리어등의 모든 강아지는 먹고,짖고, 숨을쉬고, 꼬리를 흔드는 행위를 가지고있는것이다.

상속을 통하여 무분별한 데이터의 낭비를 막을 수 있다.

 

다형성이란 상속성의 계층을 따라서 각각의 클래스에 한가지 이름을 줄 수 있는 것이다.

즉 같은 명령에 각각 다른 행위를 한다는 뜻이다. 어느 집의 강아지는 사료를먹고 어느 집의 강아지는 통조림을 먹을 것이다.
또한 짖는 소리 또한 다를수가 있다. 

 

이러한 객체지향의 특성으로 얻을 수 있는 장점으로는 자연스러운 모델링, 생산성의 향상, 점진적 개발, 견고한 이미지 모델링, 명확한 인터페이스 기술, 보안, 유지보수의 용이성 등이있다. 대표적인 개발 모델로는 폭포수모델과 나선모델이 있다.

 

 

느낀점 : 예전에 분명 전부다 배운 내용이였으나 머릿속에서 몇몇가지는 떠나간 지식이 많았다. 한번 쭉 읽음으로써 다시 OOP가 무엇이고, 클래스가 가진 특성에 대해 복습해보는 계기가 되었으며, 누군가가 나에게 물어봤을때 자신있게 대답할 수 있는 능력을 기르게 되는 계기가 된것 같다.  

 

2. 다음 Case 들이 무엇이며 주로 어떨 때 사용하는지 조사하여 답하라. 

 

2-1 CamelCase 란 낙타표기법이며 두개이상의 단어가 모인 합성에서 사용된다. 쌍봉낙타의 등과 닮았다고 하여
CamelCase란 이름이 붙여졌으며 lowerCamelCase와 UpperCamelCase로 세부적으로 나눌수 있는데, 

lowerCamelCase는 camelCase에서, 맨 앞글자를 소문자로 표기하는 것을 뜯한다. 예를들어 applebanana라는 단어는

appleBanana로 표기된다.

UpperCamelCase는 CamelCase에서, 맨 앞글자를 대문자로 표기하는 것을 뜻한다. PascalCase라고도 불리며 applebanana라는 단어는 AppleBanana로 표기된다.

 

UpperCase는 보통 클래스와 같은 객체단위에 쓰이며, lowerCase는 변수나 함수를 명명할때 주로 쓰인다.

 

2-2 snake_case 란 단어가 합쳐진 부분마다 중간에 언더라인을 붙여 주는 방법이다. 일반적으로는 언더라인을 사용하지만 하이픈을 사용해도 snake-case라고 할 수 있다. snake_case는 Train_case와 spinal_case로 세부적으로 나뉘는데

전자는 각 단어의 맨 앞글자를 대문자로, 후자는 소문자로 표기하는 것을 뜻한다.

 

snake_case는 변수 및 서브 루틴 이름과 파일 이름에 대해 일반적으로 사용되는 명명 규칙이다.

 

2-3 ALL_CAPS_UNDERSCORE 란 모든 단어를 대문자로 쓰며 중간의 공백을 언더바로 구분하는 것이다.

주로 전역변수,static변수, 매크로 상수등 값변경에 매우 주의를 요하는 경우에 쓰인다.

 

3. 첨부한 파일은 한 팀에서 사용하던 코딩컨벤션 문서이다. 문서를 읽어보고 각 항목별로 본인이 사용하던 방식과 어떻게 다는지 기술하라. 혹 문서의 주장과 반대 의견이 있으면 펼져 보아도 좋다.
 

2. 평소에도 File을 2000라인 한줄을 80 characters 를 넘기지 않는다. 또한 tab은 스페이스 4칸의 간격을 두고 있다.

 

3.1 Class Member는 파일의 내용대로 public protected private순으로 정리하는 편이다.

상황에 따라서는 얻어오는 Get함수 멤버값을 변경하는 Set함수등 기능별로 정리하기도 한다. 

 

3.3.1 : 평소에 콤마뒤에 스페이스를 붙이는 습관이 있다. 그러나 불필요한 공백을 좋아하지 않아 줄과 줄사이에 비어있는 줄을 넣진 않았다. 의미없이 Line이 늘어나는 것이라 생각했기 때문이다.

 

3.5.3 : break를 생략할때 comment를 붙이지 않았다. switch case구문을 사용할때 시작점을 통일하지 않곤 했다.

 

 

4.1: 당연한 내용이라고 생각한다. 변수는 그 의미를 알 수 있도록 지어야 한다.

4.2: 변수 이름을 지을때 하나하나 세세하게 신경쓰지 못했던것 같다.

4.3: Typename 파트에서 Class 이름은 첫글자가 대문자, 영어명사가 온다는 것은 유사하나 상속관련된 명명은 사용하고 있지 않으며 나는 Game, Banana, Apple 이라는 클래스를 지을때 클래스라는 것을 알리기위해 앞에 대문자 C를 붙여주곤 한다.

 -> CGame, CBanana, CApple

4.4: 인터페이스 앞의 대문자 I 는 DirectX를 접하면서 ID3D - - - 등을 많이 접해보았다.

4.5: 함수이름을 명명할때 기능과 관련하여 명명하긴 했지만 Camel 표기법을 사용하진 않았다.

bool 상태를 얻어오는것은 bis 로 통일하여 사용하곤 했다.

 

5. 주석은 단순히 빌드에서 제외할때 임시적으로 생각없이 사용했다.

*/ /* 와 // 를 무분별하게 사용했던것 같다.